name: Maven Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: "Release type"
        type: choice
        required: true
        default: "PATCH"
        options:
          - MAJOR
          - MINOR
          - PATCH
          - VERSION
      releaseVersion:
        description: "Release version (X.Y.Z)"
        required: false
        #default: "X.Y.Z"

jobs:
  release:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
          cache: maven

      - name: Configure Git User
        run: git config user.email "actions@github.com" && git config user.name "GitHub Actions"


      - name: 'Error: Both release Type and Version set'
        if: ${{github.event.inputs.releaseType != 'VERSION' && github.event.inputs.releaseVersion != ''}}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Cannot set Release version and type at the same time!')

      - name: 'Error: Missing version'
        if: ${{github.event.inputs.releaseType == 'VERSION' && github.event.inputs.releaseVersion == ''}}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('No release version set!')

      - name: Setup Major version
        if: ${{github.event.inputs.releaseType == 'MAJOR'}}
        run: echo RELEASE_VERSION='${parsedVersion.nextMajorVersion}.0.0' >> $GITHUB_ENV

      - name: Setup Minor version
        if: ${{github.event.inputs.releaseType == 'MINOR'}}
        run: echo RELEASE_VERSION='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}.0' >> $GITHUB_ENV

      - name: Setup Patch version
        if: ${{github.event.inputs.releaseType == 'PATCH'}}
        run: echo RELEASE_VERSION='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}' >> $GITHUB_ENV

      - name: Setup ${{github.event.inputs.releaseVersion}} version
        if: ${{github.event.inputs.releaseType == 'VERSION' && github.event.inputs.releaseVersion != ''}}
        run: echo "RELEASE_VERSION=${{github.event.inputs.releaseVersion}}" >> $GITHUB_ENV

      - name: Performing release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: mvn -B -s $GITHUB_WORKSPACE/settings.xml -Dusername=${{env.GITHUB_TOKEN}} -Dpassword=${{env.GITHUB_TOKEN}} build-helper:parse-version release:prepare release:perform -DreleaseVersion='${{env.RELEASE_VERSION}}'
